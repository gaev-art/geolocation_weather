{"version":3,"sources":["g1-ui/u1-header/Header.module.css","g1-ui/u4- history/History.module.css","g1-ui/App.module.css","serviceWorker.js","g3-dal/Geolocation-api.js","g2-bll/Geolocation-Reducer.js","g3-dal/Weather-api.js","g2-bll/weather-Reducer.js","g2-bll/store.js","g1-ui/u1-header/Header.js","g1-ui/u2-geolocation/Geolocation.js","g1-ui/u3-weather/Weather.js","g1-ui/u4- history/History.js","g1-ui/App.js","g1-ui/AppContainer.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","getAddressApi","longitude","latitude","axios","get","process","then","response","data","initialState","userAddress","historyUserAddress","action","type","getWeatherApi","lat","lon","catch","e","console","log","message","weather","main","weatherLS","mainLS","dateTimeLS","rootReducer","combineReducers","geolocation","state","store","createStore","composeWithDevTools","applyMiddleware","thunk","Header","className","style","grow","AppBar","color","Toolbar","container","List","nav","to","ListItem","button","Geolocation","useSelector","Weather","map","el","index","key","temp","width","verticalAlign","src","icon","alt","description","History","weatherHistory","mainHistory","userAddressHistory","dateInfo","item","day","month","year","hours","minutes","ReactGeolocation","appWrapperContent","App","appWrapper","exact","path","render","AppContainer","dispatch","useDispatch","useEffect","navigator","getCurrentPosition","getCoordinates","handleLocationError","alert","position","coords","latitudeInRedux","toFixed","longitudeInRedux","getState","a","userAddressParse","localStorage","getItem","JSON","parse","userAddressState","setItem","stringify","results","formatted_address","table","getAddress","date","Date","datesInfo","getFullYear","getMonth","getDate","getHours","getMinutes","id","getSeconds","dateParse","weatherDataParse","mainDataParse","weatherState","mainState","dateState","getWeather","error","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d3c76bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Header_container__16HIn\",\"grow\":\"Header_grow__15kSQ\",\"nav\":\"Header_nav__2MUFu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"History_container__3JLY4\",\"item\":\"History_item__Hvlcm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__1UXbi\",\"appWrapperContent\":\"App_appWrapperContent__31lJd\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Header is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\r\n\r\nconst KEY = process.env.REACT_APP_KEY_FOR_GOOGLE_MAP\r\n\r\n\r\nexport const getAddressApi = {\r\n    getUserAddress(longitude, latitude) {\r\n        return axios.get(`https://maps.googleapis.com/maps/api/geocode/json?1.x&latlng=${latitude},${longitude}&key=${KEY}`)\r\n            .then(response => response.data)\r\n    }\r\n};\r\n","import {getAddressApi} from '../g3-dal/Geolocation-api';\r\n\r\nconst SET_COORDINATES = 'SET_COORDINATES';\r\nconst GET_USER_ADDRESS = 'GET_USER_ADDRESS';\r\nconst HISTORY_USER_ADDRESS = 'HISTORY_USER_ADDRESS';\r\n\r\n\r\nconst initialState = {\r\n    latitude: '',\r\n    longitude: '',\r\n    userAddress: '',\r\n    historyUserAddress: []\r\n};\r\n\r\n\r\nexport const GeolocationReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_COORDINATES: {\r\n            return {\r\n                ...state,\r\n                latitude: action.latitude,\r\n                longitude: action.longitude\r\n            }\r\n        }\r\n        case GET_USER_ADDRESS: {\r\n            return {\r\n                ...state,\r\n                userAddress: action.userAddress\r\n            }\r\n        }\r\n        case HISTORY_USER_ADDRESS: {\r\n            return {\r\n                ...state,\r\n                historyUserAddress: [...state.historyUserAddress, ...action.historyUserAddress]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport const action = {\r\n    setCoordinatesSuccess: (latitude, longitude) => ({type: SET_COORDINATES, latitude, longitude}),\r\n    getUserAddressSuccess: (userAddress) => ({type: GET_USER_ADDRESS, userAddress}),\r\n    historyUserAddressSuccess: (historyUserAddress) => ({type: HISTORY_USER_ADDRESS, historyUserAddress})\r\n};\r\n\r\nexport const getAddress = (longitude, latitude) => async (dispatch, getState) => {\r\n    let userAddressParse = localStorage.getItem('user address');\r\n    if (userAddressParse) {\r\n        dispatch(action.historyUserAddressSuccess(JSON.parse(userAddressParse)))\r\n    }\r\n    try {\r\n        let data = await getAddressApi.getUserAddress(latitude, longitude);\r\n        const userAddressState = getState().geolocation.historyUserAddress;\r\n        localStorage.setItem('user address', JSON.stringify([data.results[0].formatted_address, ...userAddressState]));\r\n        dispatch(action.getUserAddressSuccess(data.results[0].formatted_address));\r\n    } catch (e) {\r\n        console.table(e.message)\r\n    }\r\n};","import axios from 'axios';\r\n\r\nconst KEY = process.env.REACT_APP_KEY_FOR_WEATHER\r\n\r\nexport const getWeatherApi = {\r\n    getWeather(lat, lon) {\r\n        return axios.get(\r\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&apikey=${KEY}&lang=ru&units=metric`)\r\n            .then(response => response.data)\r\n            .catch(e => console.log(e.message))\r\n    }\r\n};\r\n\r\n","import {getWeatherApi} from '../g3-dal/Weather-api';\r\n\r\n\r\nconst GET_WEATHER = 'GET_WEATHER'\r\nconst SET_WEATHER_IN_LS = 'SET_WEATHER_IN_LS'\r\nconst SET_MAIN_IN_LS = 'SET_MAIN_IN_LS'\r\nconst SET_DATE_TIME_IN_LS = 'SET_DATE_TIME_IN_LS'\r\n\r\n\r\nconst initialState = {\r\n    weather: [],\r\n    main: {},\r\n    weatherLS: [],\r\n    mainLS: [],\r\n    dateTimeLS: []\r\n};\r\n\r\nexport const WeatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_WEATHER: {\r\n            return {\r\n                ...state,\r\n                weather: action.weather,\r\n                main: action.main\r\n            }\r\n        }\r\n        case SET_WEATHER_IN_LS: {\r\n            return {\r\n                ...state,\r\n                weatherLS: [...action.weatherLS, ...state.weatherLS]\r\n            }\r\n        }\r\n        case SET_MAIN_IN_LS: {\r\n            return {\r\n                ...state,\r\n                mainLS: [...action.mainLS, ...state.mainLS]\r\n            }\r\n        }\r\n        case SET_DATE_TIME_IN_LS: {\r\n            return {\r\n                ...state,\r\n                dateTimeLS: [...action.dateTimeLS, ...state.dateTimeLS]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const action = {\r\n    getWeatherSuccess: (weather, main) => ({type: GET_WEATHER, weather, main}),\r\n    weatherLSSuccess: (weatherLS) => ({type: SET_WEATHER_IN_LS, weatherLS}),\r\n    mainLSSuccess: (mainLS) => ({type: SET_MAIN_IN_LS, mainLS}),\r\n    dateTimeLSSuccess: (dateTimeLS) => ({type: SET_DATE_TIME_IN_LS, dateTimeLS})\r\n};\r\n\r\nexport const getWeather = (lat, lon) => async (dispatch, getState) => {\r\n    let date = new Date();\r\n    let datesInfo = {\r\n        year: date.getFullYear(),\r\n        month: date.getMonth(),\r\n        day: date.getDate(),\r\n        hours: date.getHours(),\r\n        minutes: date.getMinutes(),\r\n        id: date.getSeconds()\r\n    };\r\n    console.log(datesInfo)\r\n    let dateParse = localStorage.getItem('date data')\r\n    if (dateParse) {\r\n        dispatch(action.dateTimeLSSuccess(JSON.parse(dateParse)))\r\n    }\r\n    let weatherDataParse = localStorage.getItem('weather data');\r\n    if (weatherDataParse) {\r\n        dispatch(action.weatherLSSuccess(JSON.parse(weatherDataParse)));\r\n    }\r\n    let mainDataParse = localStorage.getItem('main data');\r\n    if (mainDataParse) {\r\n        dispatch(action.mainLSSuccess(JSON.parse(mainDataParse)));\r\n    }\r\n    try {\r\n        let data = await getWeatherApi.getWeather(lat, lon);\r\n        const weatherState = getState().weather.weatherLS;\r\n        const mainState = getState().weather.mainLS;\r\n        const dateState = getState().weather.dateTimeLS\r\n        localStorage.setItem('weather data', JSON.stringify([data.weather[0], ...weatherState]));\r\n        localStorage.setItem('main data', JSON.stringify([data.main.temp, ...mainState]));\r\n        localStorage.setItem('date data', JSON.stringify([datesInfo, ...dateState]))\r\n        dispatch(action.getWeatherSuccess(data.weather, data.main));\r\n    } catch (e) {\r\n        console.table(e.message)\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {GeolocationReducer} from './Geolocation-Reducer';\r\nimport {WeatherReducer} from './weather-Reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    geolocation: GeolocationReducer,\r\n    weather: WeatherReducer\r\n});\r\n\r\n\r\nexport let store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport style from './Header.module.css';\nimport ListItem from '@material-ui/core/ListItem';\nimport List from '@material-ui/core/List';\nimport {NavLink} from 'react-router-dom';\n\n\nexport default function Header() {\n    return (\n        <div className={style.grow}>\n            <AppBar color=\"inherit\">\n                <Toolbar className={style.container}>\n                    <div className={style.grow}/>\n                    <List className={style.nav}>\n                        <NavLink to='/'>\n                            <ListItem button>\n                                Geolocation and Weather\n                            </ListItem>\n                        </NavLink>\n                        <NavLink to='/history'>\n                            <ListItem button>\n                                History\n                            </ListItem>\n                        </NavLink>\n                    </List>\n                    <div className={style.grow}/>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nexport default function Geolocation() {\n\n\n    const latitude = useSelector((state) => state.geolocation.latitude);\n    const longitude = useSelector((state) => state.geolocation.longitude);\n    const userAddress = useSelector((state) => state.geolocation.userAddress);\n\n\n    return <div>\n        <p>Latitude: {latitude}</p>\n        <p>Longitude: {longitude}</p>\n        <p>Address: {userAddress} </p>\n    </div>\n}\n\n\n","import React from 'react';\nimport {useSelector} from 'react-redux';\n\nexport default function Weather() {\n\n    const weather = useSelector(state => state.weather.weather);\n    const main = useSelector(state => state.weather.main);\n\n\n    return <div>\n        {weather.map((el, index) => {\n            return <p key={index}>{main.temp}C{'\\u00b0'},\n                <img style={{width: '30px', verticalAlign: 'middle'}}\n                     src={`http://openweathermap.org/img/w/${el.icon}.png`} alt=''/>\n                {el.description}</p>\n        })}\n    </div>\n}\n\n","import React from 'react';\nimport style from './History.module.css'\nimport {useSelector} from 'react-redux';\n\nexport default function History() {\n\n    const weatherHistory = useSelector(state => state.weather.weatherLS);\n    const mainHistory = useSelector(state => state.weather.mainLS);\n    const userAddressHistory = useSelector(state => state.geolocation.historyUserAddress);\n    const dateInfo = useSelector(state => state.weather.dateTimeLS);\n\n\n    return <div className={style.container}>\n        <div className={style.item}>\n            {dateInfo.map((el, index) => {\n                return (\n                    <p key={index}>\n                        {el.day}.{el.month}.{el.year}г. {el.hours}:{el.minutes}\n                    </p>\n                )\n            })}\n        </div>\n        <div className={style.item}>\n            {mainHistory.map((el, index) => {\n                return (\n                    <p key={index}>\n                        {el}C{'\\u00b0'}\n                    </p>\n                )\n            })}\n        </div>\n        <div className={style.item}>\n            {weatherHistory.map((el, index) => {\n                return <p key={index}>\n                    {/*<img style={{width: '20px', verticalAlign: 'middle'}}*/}\n                    {/*     src={`http://openweathermap.org/img/w/${el.icon}.png`} alt=''/>*/}\n                    {el.description}</p>\n            })}\n        </div>\n        <div className={style.item}>\n            {userAddressHistory.map((el, index) => {\n                return <p key={index}>{el}</p>\n            })}\n        </div>\n    </div>\n}\n\n","import React from 'react';\nimport style from './App.module.css';\nimport Header from './u1-header/Header';\nimport Geolocation from './u2-geolocation/Geolocation';\nimport Weather from './u3-weather/Weather';\nimport {Route, Switch} from 'react-router-dom';\nimport History from './u4- history/History';\n\nfunction ReactGeolocation() {\n    return <div className={style.appWrapperContent}>\n        <Geolocation/>\n        <Weather/>\n    </div>\n}\n\nfunction App() {\n    return <div className={style.appWrapper}>\n        <Header/>\n        <div>\n            <Switch>\n                <Route exact path='/' render={() => <ReactGeolocation/>}/>\n                <Route path='/history' render={() => <History/>}/>\n            </Switch>\n\n        </div>\n    </div>\n}\n\nexport default App;\n","import React, {useEffect} from 'react';\nimport App from './App';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {action, getAddress} from '../g2-bll/Geolocation-Reducer';\nimport {getWeather} from '../g2-bll/weather-Reducer';\n\nexport default function AppContainer() {\n    const dispatch = useDispatch();\n\n    const lat = useSelector((state) => state.geolocation.latitude);\n\n\n    useEffect(() => {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(getCoordinates, handleLocationError);\n        } else {\n            alert('Geolocation is not supported by this browser.');\n        }\n    }, []);\n\n    const getCoordinates = (position) => {\n        const {latitude, longitude} = position.coords;\n        const latitudeInRedux = latitude.toFixed(3)\n        const longitudeInRedux = longitude.toFixed(3)\n        dispatch(action.setCoordinatesSuccess(latitudeInRedux, longitudeInRedux));\n        if (lat !== latitudeInRedux) {\n            dispatch(getAddress(latitude, longitude))\n            dispatch(getWeather(latitude, longitude));\n        }\n    };\n\n    const handleLocationError = (error) => {\n        switch (error.code) {\n            case error.PERMISSION_DENIED:\n                console.log('User denied the request for Geolocation.');\n                break;\n            case error.POSITION_UNAVAILABLE:\n                console.log('Location information is unavailable.');\n                break;\n            case error.TIMEOUT:\n                console.log('The request to get user location timed out.');\n                break;\n\n            default:\n                console.log('An unknown error occurred.');\n        }\n    };\n\n\n    return <App/>\n}\n","import React from 'react';\nimport {render} from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './g2-bll/store';\nimport {HashRouter} from 'react-router-dom';\nimport AppContainer from './g1-ui/AppContainer';\n\nrender(\n    <HashRouter>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}